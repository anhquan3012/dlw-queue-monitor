import pygamefrom pygame.locals import *from button import Buttonfrom check_region import in_region, count_in_regionsRED = (255, 0, 0)GRAY = (127, 127, 127)BLUE = (0, 0, 255)height = 500width = 1000pygame.init()screen = pygame.display.set_mode((width, height))def set_up_regions():        running = True    i = 0    start_pos = None    first_pos = None        set_up_button = Button(screen, "Press 'C' to Complete setting kiosk locations",                           (10, height-40), font=30, bg="green")        regions = {}    region_idx = 1        # #point = (500, 250)    # points = [    #     (250, 240),    #     (350, 400),    #     (250, 270),    #     (360, 420),    #     (450, 400),    #     (600, 200),    #     (700, 250),    #     (800, 400)    # ]    # for point in points:    #     pygame.draw.circle(screen, GRAY, point, 10)        while running:        for event in pygame.event.get():            set_up_button.click(event, regions)                        if event.type == QUIT:                running = False                elif event.type == MOUSEBUTTONDOWN:                start_pos = event.pos                pygame.draw.circle(screen, RED, event.pos, 6)                if i == 0:                    regions[region_idx] = {}                i += 1                regions[region_idx][f'x{i}']=event.pos[0]                regions[region_idx][f'y{i}']=event.pos[1]                if i == 1:                    first_pos = event.pos                if i == 4:                    pygame.draw.line(screen, BLUE, event.pos, first_pos, 4)                    i = 0                    region_idx += 1                            elif event.type == MOUSEMOTION and 0< i <=3:                pygame.draw.line(screen, BLUE, start_pos, event.pos, 4)                        elif event.type == KEYDOWN and event.key == pygame.K_c:                running = False                        set_up_button.show()        pygame.display.update()             # print(f"\nRegion - counter: {count_in_regions(regions, points)}")    return regionsprint(set_up_regions())pygame.quit()